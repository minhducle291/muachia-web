# region Th∆∞ vi·ªán v√† Default setting
import pandas as pd
import streamlit as st
from io import BytesIO
from datetime import datetime, timedelta
import requests

def wide_space_default():
    st.set_page_config(layout='wide')
wide_space_default()
# endregion

# region ƒê·ªçc d·ªØ li·ªáu c·∫ßn ƒë·∫©y l√™n Web
# ƒê·ªçc d·ªØ li·ªáu t·ª´ file Excel
report_date = pd.to_datetime("today").strftime("%Y-%m-%d")
file_path = r'D:/TASK MUA CHIA/KI·ªÇM TRA NHU C·∫¶U SI√äU TH·ªä KHAI TR∆Ø∆†NG/data/data-'+ str(report_date) + '.xlsx'
df = pd.read_excel(file_path)

# Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng c·ªôt\
df["Ng√†y khai tr∆∞∆°ng"] = pd.to_datetime(df["Ng√†y khai tr∆∞∆°ng"]).dt.date
df["Ng√†y nh·∫≠n h√†ng"] = df["Ng√†y nh·∫≠n h√†ng"].dt.date
df["M√£ si√™u th·ªã"] = df["M√£ si√™u th·ªã"].astype(str)
df['T·ªïng nhu c·∫ßu'] = round(df['T·ªïng nhu c·∫ßu'], 1).astype(int)
# ƒê·ªïi t√™n c·ªôt n·∫øu c·∫ßn ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi b·ªô l·ªçc
df.columns = ['Ng√†y khai tr∆∞∆°ng', 'Th·ª© (Khai tr∆∞∆°ng)','Ng√†y nh·∫≠n h√†ng', 'M√£ si√™u th·ªã', 'T√™n si√™u th·ªã', 'Mi·ªÅn', 'Ng√†nh h√†ng',
              'Nh√≥m h√†ng 2', 'S·ªë l∆∞·ª£ng SKU', 'T·ªïng nhu c·∫ßu','SL Notify']
# endregion

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("üîé Ki·ªÉm tra nhu c·∫ßu si√™u th·ªã khai tr∆∞∆°ng")

# region Th√¥ng tin th·ªùi gian c·∫≠p nh·∫≠t GitHub
REPO_OWNER = "minhducle291"
REPO_NAME = "muachia-app"
FILE_PATH = "data-2025-04-06.xlsx"

def get_last_commit_time(owner, repo, file_path):
    url = f"https://api.github.com/repos/{owner}/{repo}/commits?path={file_path}&page=1&per_page=1"
    response = requests.get(url)
    if response.status_code == 200:
        commit_data = response.json()[0]
        commit_time = commit_data["commit"]["committer"]["date"]  # D·∫°ng: 2025-04-04T09:13:53Z
        return commit_time
    else:
        return None

# L·∫•y ng√†y c·∫≠p nh·∫≠t g·∫ßn nh·∫•t
last_modified_time = get_last_commit_time(REPO_OWNER, REPO_NAME, FILE_PATH)

if last_modified_time:
    # Parse string th·ªùi gian ‚Üí datetime UTC
    utc_time = datetime.strptime(last_modified_time, "%Y-%m-%dT%H:%M:%SZ")
    
    # Chuy·ªÉn sang gi·ªù Vi·ªát Nam (UTC+7)
    vn_time = utc_time + timedelta(hours=7)

    # Hi·ªÉn th·ªã tr√™n web
    st.markdown(
        f"<span style='font-size: 14px; font-style: italic;'>üìÖ D·ªØ li·ªáu c·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {vn_time.strftime('%H:%M:%S %d/%m/%Y')} (gi·ªù VN)</span>",
        unsafe_allow_html=True
    )
else:
    st.warning("Kh√¥ng th·ªÉ l·∫•y th·ªùi gian c·∫≠p nh·∫≠t file t·ª´ GitHub.")
# endregion

# region Sidebar - B·ªô l·ªçc

# B·ªô l·ªçc
st.sidebar.header("B·ªô L·ªçc")

# L·ªçc theo Ng√†y khai tr∆∞∆°ng
ngay_khai_truong = st.sidebar.date_input("Ng√†y khai tr∆∞∆°ng", None)
if ngay_khai_truong:
    df = df[df['Ng√†y khai tr∆∞∆°ng'] == pd.to_datetime(ngay_khai_truong).date()]

# L·ªçc theo M√£ si√™u th·ªã (c√≥ t√¨m ki·∫øm)
ma_sieu_options = df['M√£ si√™u th·ªã'].unique().tolist()
ma_sieu = st.sidebar.selectbox("M√£ Si√™u Th·ªã", ["T·∫•t c·∫£"] + sorted(ma_sieu_options), index=0)
if ma_sieu != "T·∫•t c·∫£":
    df = df[df['M√£ si√™u th·ªã'] == ma_sieu]

# L·ªçc theo M√£ si√™u th·ªã (c√≥ t√¨m ki·∫øm)
mien_options = df['Mi·ªÅn'].unique().tolist()
mien = st.sidebar.selectbox("Mi·ªÅn", ["T·∫•t c·∫£"] + sorted(mien_options), index=0)
if mien != "T·∫•t c·∫£":
    df = df[df['Mi·ªÅn'] == mien]

# L·ªçc theo Ng√†nh h√†ng (c√≥ t√¨m ki·∫øm)
nganh_hang_options = df["Ng√†nh h√†ng"].dropna().unique().tolist()
nganh_hang = st.sidebar.selectbox("Ng√†nh H√†ng", ["T·∫•t c·∫£"] + sorted(nganh_hang_options), index=0)
if nganh_hang != "T·∫•t c·∫£":
    df = df[df["Ng√†nh h√†ng"] == nganh_hang]

# L·ªçc theo Nh√≥m h√†ng 2 (c√≥ t√¨m ki·∫øm)
nhom_hang_options = df["Nh√≥m h√†ng 2"].dropna().unique().tolist()
nhom_hang = st.sidebar.selectbox("Nh√≥m H√†ng 2", ["T·∫•t c·∫£"] + sorted(nhom_hang_options), index=0)
if nhom_hang != "T·∫•t c·∫£":
    df = df[df["Nh√≥m h√†ng 2"] == nhom_hang]
# endregion

# Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu ƒë√£ l·ªçc v·ªõi chi·ªÅu d√†i t·ªëi ƒëa
st.dataframe(df, use_container_width=True, height=530)

# region Button t·∫£i xu·ªëng
# Th√™m n√∫t t·∫£i xu·ªëng
@st.cache_data
def convert_df_to_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Data')
    output.seek(0)  # ƒê∆∞a con tr·ªè v·ªÅ ƒë·∫ßu file
    return output.getvalue()

# G·ªçi h√†m ƒë·ªÉ t·∫°o file Excel
excel_file = convert_df_to_excel(df)

# T·∫£i xu·ªëng file Excel
st.download_button(
    label="‚¨áÔ∏è T·∫£i xu·ªëng d·ªØ li·ªáu",
    data=excel_file,
    file_name="danh_sach_sieu_thi_loc.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)
# endregion
